import type { Bud } from '@roots/bud-framework';
import { Extension } from '@roots/bud-framework/extension';
import type { Config, ThemeConfig } from 'tailwindcss/types/config.js';
interface BudTailwindVFile {
    name: string;
    path: string | false;
    module: Config;
}
interface Options {
    generateImports?: Array<`${keyof ThemeConfig & string}`> | boolean;
}
/**
 * TailwindCSS configuration
 */
export declare class BudTailwindCss extends Extension<Options> {
    /**
     * Tailwind config (path)
     */
    get file(): BudTailwindVFile;
    /**
     * Tailwind config (resolved)
     */
    get config(): {
        [x: string]: any;
        [x: number]: any;
        [x: symbol]: any;
        theme?: {
            [x: string]: any;
        };
    };
    /**
     * Tailwind theme (resolved)
     */
    get theme(): {
        [x: string]: any;
    };
    /**
     * Resolve a tailwind config value
     */
    resolveThemeValue<K extends `${keyof ThemeConfig & string}`>(key: K, extendedOnly?: boolean): Config[K];
    /**
     * {@link Extension.boot}
     */
    boot(bud: Bud): Promise<void>;
    /**
     * Generate import mapping
     *
     * @example
     * Generate colors import:
     *
     * ```js
     * bud.tailwind.generateImports([`colors`])
     * ```
     *
     * @example
     * Generate all imports:
     *
     * ```js
     * bud.tailwind.generateImports(true)
     * ```
     */
    generateImports(imports?: Array<`${keyof ThemeConfig & string}`> | boolean): Promise<this>;
    buildBefore(): Promise<void>;
}
export {};
//# sourceMappingURL=index.d.ts.map