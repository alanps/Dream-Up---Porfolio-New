import { __decorate, __metadata } from "tslib";
import { Extension } from '@roots/bud-framework/extension';
import { bind, development, label, } from '@roots/bud-framework/extension/decorators';
/**
 * Typescript react-refresh configuration
 */
let BudTypeScriptRefresh = class BudTypeScriptRefresh extends Extension {
    /**
     * {@link Extension.buildBefore}
     */
    async buildBefore(bud) {
        this.registerTransform(bud);
    }
    /**
     * Register tsc react-refresh transform
     */
    async registerTransform(bud) {
        this.logger.log(`Registering react-refresh-typescript transformer`);
        const transform = await this.import(`react-refresh-typescript`, import.meta.url);
        const transformation = (_program) => ({ before: [transform()] });
        const callback = (_bud) => transformation;
        bud.extensions
            .get(`@roots/bud-typescript`)
            .set(`getCustomTransformers`, callback);
    }
};
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function]),
    __metadata("design:returntype", Promise)
], BudTypeScriptRefresh.prototype, "buildBefore", null);
__decorate([
    bind,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function]),
    __metadata("design:returntype", Promise)
], BudTypeScriptRefresh.prototype, "registerTransform", null);
BudTypeScriptRefresh = __decorate([
    label(`@roots/bud-react/typescript-refresh`),
    development
], BudTypeScriptRefresh);
export default BudTypeScriptRefresh;
//# sourceMappingURL=extension.js.map